"use strict";

exports.__esModule = true;
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _ast = require("../parse/ast");

var _printers = _interopRequireDefault(require("../printers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Node {
  constructor(node) {
    _defineProperty(this, "children", void 0);

    _defineProperty(this, "kind", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "raw", void 0);

    _defineProperty(this, "namespace", void 0);

    _defineProperty(this, "module", void 0);

    //$off
    this.children = Object.create(null);

    if (node !== null) {
      this.raw = (0, _ast.stripDetailsFromTree)(node);
      this.name = (0, _ast.parseNameFromNode)(node);
    }
  }

  addChild(name, node) {
    this.children[name] = node;
  } //TODO: remove this


  addChildren(name, node) {
    if (!this.children[name]) {
      this.children[name] = node;
      return;
    }

    if (this.children[name]) {
      for (const key in node.children) {
        this.children[name].addChildren(key, node.children[key]);
      }

      return;
    }
  }
  /**
   * Used for overloading the props of some types
   */


  maybeAddMember(members) {
    const rawMembers = this.raw.members;

    if (!rawMembers) {
      return;
    }

    if (Array.isArray(members)) {
      members.forEach(member => {
        rawMembers.push((0, _ast.stripDetailsFromTree)(member));
      });
    } else {
      rawMembers.push((0, _ast.stripDetailsFromTree)(members));
    }
  }

  getChildren() {
    return _lodash.default.toArray(this.children);
  } //eslint-disable-next-line


  print(namespace, module, depth) {
    return _printers.default.node.printType(this.raw);
  }

}

exports.default = Node;