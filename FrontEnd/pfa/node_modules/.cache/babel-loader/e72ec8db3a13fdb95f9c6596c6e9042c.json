{"ast":null,"code":"import _forEach from \"lodash/forEach\";\nimport computeClassNames from './computeClassNames';\nimport computeClassNamesDifference from './computeClassNamesDifference';\nvar prevClassNames = new Map();\n/**\n * @param {React.RefObject} nodeRef\n * @param {Object[]} components\n */\n\nvar handleClassNamesChange = function handleClassNamesChange(nodeRef, components) {\n  var currentClassNames = computeClassNames(components);\n\n  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(nodeRef), currentClassNames),\n      forAdd = _computeClassNamesDif[0],\n      forRemoval = _computeClassNamesDif[1];\n\n  if (nodeRef.current) {\n    _forEach(forAdd, function (className) {\n      return nodeRef.current.classList.add(className);\n    });\n\n    _forEach(forRemoval, function (className) {\n      return nodeRef.current.classList.remove(className);\n    });\n  }\n\n  prevClassNames.set(nodeRef, currentClassNames);\n};\n\nexport default handleClassNamesChange;","map":{"version":3,"sources":["E:/Projetos/Portal/PF/EBK_PF_Adm/FrontEnd/pfa/node_modules/semantic-ui-react/dist/es/addons/MountNode/lib/handleClassNamesChange.js"],"names":["_forEach","computeClassNames","computeClassNamesDifference","prevClassNames","Map","handleClassNamesChange","nodeRef","components","currentClassNames","_computeClassNamesDif","get","forAdd","forRemoval","current","className","classList","add","remove","set"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,IAAIC,cAAc,GAAG,IAAIC,GAAJ,EAArB;AACA;;;;;AAKA,IAAIC,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,OAAhC,EAAyCC,UAAzC,EAAqD;AAChF,MAAIC,iBAAiB,GAAGP,iBAAiB,CAACM,UAAD,CAAzC;;AAEA,MAAIE,qBAAqB,GAAGP,2BAA2B,CAACC,cAAc,CAACO,GAAf,CAAmBJ,OAAnB,CAAD,EAA8BE,iBAA9B,CAAvD;AAAA,MACIG,MAAM,GAAGF,qBAAqB,CAAC,CAAD,CADlC;AAAA,MAEIG,UAAU,GAAGH,qBAAqB,CAAC,CAAD,CAFtC;;AAIA,MAAIH,OAAO,CAACO,OAAZ,EAAqB;AACnBb,IAAAA,QAAQ,CAACW,MAAD,EAAS,UAAUG,SAAV,EAAqB;AACpC,aAAOR,OAAO,CAACO,OAAR,CAAgBE,SAAhB,CAA0BC,GAA1B,CAA8BF,SAA9B,CAAP;AACD,KAFO,CAAR;;AAIAd,IAAAA,QAAQ,CAACY,UAAD,EAAa,UAAUE,SAAV,EAAqB;AACxC,aAAOR,OAAO,CAACO,OAAR,CAAgBE,SAAhB,CAA0BE,MAA1B,CAAiCH,SAAjC,CAAP;AACD,KAFO,CAAR;AAGD;;AAEDX,EAAAA,cAAc,CAACe,GAAf,CAAmBZ,OAAnB,EAA4BE,iBAA5B;AACD,CAlBD;;AAoBA,eAAeH,sBAAf","sourcesContent":["import _forEach from \"lodash/forEach\";\nimport computeClassNames from './computeClassNames';\nimport computeClassNamesDifference from './computeClassNamesDifference';\nvar prevClassNames = new Map();\n/**\n * @param {React.RefObject} nodeRef\n * @param {Object[]} components\n */\n\nvar handleClassNamesChange = function handleClassNamesChange(nodeRef, components) {\n  var currentClassNames = computeClassNames(components);\n\n  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(nodeRef), currentClassNames),\n      forAdd = _computeClassNamesDif[0],\n      forRemoval = _computeClassNamesDif[1];\n\n  if (nodeRef.current) {\n    _forEach(forAdd, function (className) {\n      return nodeRef.current.classList.add(className);\n    });\n\n    _forEach(forRemoval, function (className) {\n      return nodeRef.current.classList.remove(className);\n    });\n  }\n\n  prevClassNames.set(nodeRef, currentClassNames);\n};\n\nexport default handleClassNamesChange;"]},"metadata":{},"sourceType":"module"}