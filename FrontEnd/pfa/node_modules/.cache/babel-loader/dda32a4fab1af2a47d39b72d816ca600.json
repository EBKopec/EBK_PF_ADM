{"ast":null,"code":"export const base64ToBlob = (base64, mimetype, slicesize) => {\n  // if (!decodeURIComponent(escape(window.atob(b64))) || !window.Uint8Array) {\n  //     // The current browser doesn't have the atob function. Cannot continue\n  //     return null;\n  // }\n  mimetype = mimetype || '';\n  slicesize = slicesize || 1024;\n  var bytechars = base64;\n  var bytearrays = [];\n\n  for (var offset = 0; offset < bytechars.length; offset += slicesize) {\n    var slice = bytechars.slice(offset, offset + slicesize);\n    var bytenums = new Array(slice.length);\n\n    for (var i = 0; i < slice.length; i++) {\n      bytenums[i] = slice.charCodeAt(i);\n    }\n\n    var bytearray = new Uint8Array(bytenums);\n    bytearrays[bytearrays.length] = bytearray;\n  }\n\n  return new Blob(bytearrays, {\n    type: mimetype\n  });\n};\nexport const downloadFile = (blob, filename) => {\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style = \"display:none\";\n  var url = window.URL.createObjectURL(blob);\n  a.href = url;\n  a.download = filename;\n  a.click();\n  window.URL.revokeObjectURL(url);\n  a.remove();\n};\nexport const str2bytes = str => {\n  console.log(str.length);\n  var bytes = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n};\nexport const checkArray = array => {\n  if (typeof array !== undefined && Object.values(array).length > 0) {\n    return array;\n  } else {\n    console.log(array);\n    throw \"Array invalid or empty\";\n  }\n};","map":{"version":3,"sources":["E:/Projetos/Portal/PF/EBK_PF_Adm/FrontEnd/pfa/src/components/utils/bytes.js"],"names":["base64ToBlob","base64","mimetype","slicesize","bytechars","bytearrays","offset","length","slice","bytenums","Array","i","charCodeAt","bytearray","Uint8Array","Blob","type","downloadFile","blob","filename","a","document","createElement","body","appendChild","style","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","remove","str2bytes","str","console","log","bytes","checkArray","array","undefined","Object","values"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmBC,SAAnB,KAAiC;AACzD;AACA;AACA;AACA;AACAD,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACAC,EAAAA,SAAS,GAAGA,SAAS,IAAI,IAAzB;AACA,MAAIC,SAAS,GAAGH,MAAhB;AACA,MAAII,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,SAAS,CAACG,MAAxC,EAAgDD,MAAM,IAAIH,SAA1D,EAAqE;AACjE,QAAIK,KAAK,GAAGJ,SAAS,CAACI,KAAV,CAAgBF,MAAhB,EAAwBA,MAAM,GAAGH,SAAjC,CAAZ;AACA,QAAIM,QAAQ,GAAG,IAAIC,KAAJ,CAAUF,KAAK,CAACD,MAAhB,CAAf;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACD,MAA1B,EAAkCI,CAAC,EAAnC,EAAuC;AACnCF,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcH,KAAK,CAACI,UAAN,CAAiBD,CAAjB,CAAd;AACH;;AACD,QAAIE,SAAS,GAAG,IAAIC,UAAJ,CAAeL,QAAf,CAAhB;AACAJ,IAAAA,UAAU,CAACA,UAAU,CAACE,MAAZ,CAAV,GAAgCM,SAAhC;AACH;;AACD,SAAO,IAAIE,IAAJ,CAASV,UAAT,EAAqB;AAAEW,IAAAA,IAAI,EAAEd;AAAR,GAArB,CAAP;AACH,CAnBM;AAqBP,OAAO,MAAMe,YAAY,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC5C,MAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,EAAAA,CAAC,CAACK,KAAF,GAAU,cAAV;AACA,MAAIC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BX,IAA3B,CAAV;AACAE,EAAAA,CAAC,CAACU,IAAF,GAASJ,GAAT;AACAN,EAAAA,CAAC,CAACW,QAAF,GAAaZ,QAAb;AACAC,EAAAA,CAAC,CAACY,KAAF;AACAL,EAAAA,MAAM,CAACC,GAAP,CAAWK,eAAX,CAA2BP,GAA3B;AACAN,EAAAA,CAAC,CAACc,MAAF;AACH,CAVM;AAYP,OAAO,MAAMC,SAAS,GAAIC,GAAD,IAAS;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAAC7B,MAAhB;AACA,MAAIgC,KAAK,GAAG,IAAIzB,UAAJ,CAAesB,GAAG,CAAC7B,MAAnB,CAAZ;;AACA,OAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACyB,GAAG,CAAC7B,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC9B4B,IAAAA,KAAK,CAAC5B,CAAD,CAAL,GAAWyB,GAAG,CAACxB,UAAJ,CAAeD,CAAf,CAAX;AACD;;AACD,SAAO4B,KAAP;AACH,CAPK;AASN,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAElC,MAAI,OAAOA,KAAP,KAAiBC,SAAjB,IAA8BC,MAAM,CAACC,MAAP,CAAcH,KAAd,EAAqBlC,MAArB,GAA8B,CAAhE,EAAmE;AAC/D,WAAOkC,KAAP;AACH,GAFD,MAEO;AACHJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA,UAAM,wBAAN;AACH;AACJ,CARO","sourcesContent":["export const base64ToBlob = (base64, mimetype, slicesize) => {\r\n    // if (!decodeURIComponent(escape(window.atob(b64))) || !window.Uint8Array) {\r\n    //     // The current browser doesn't have the atob function. Cannot continue\r\n    //     return null;\r\n    // }\r\n    mimetype = mimetype || '';\r\n    slicesize = slicesize || 1024;\r\n    var bytechars = base64;\r\n    var bytearrays = [];\r\n    for (var offset = 0; offset < bytechars.length; offset += slicesize) {\r\n        var slice = bytechars.slice(offset, offset + slicesize);\r\n        var bytenums = new Array(slice.length);\r\n        for (var i = 0; i < slice.length; i++) {\r\n            bytenums[i] = slice.charCodeAt(i);\r\n        }\r\n        var bytearray = new Uint8Array(bytenums);\r\n        bytearrays[bytearrays.length] = bytearray;\r\n    }\r\n    return new Blob(bytearrays, { type: mimetype });\r\n};\r\n\r\nexport const downloadFile = (blob, filename) => {\r\n    var a = document.createElement(\"a\");\r\n    document.body.appendChild(a);\r\n    a.style = \"display:none\";\r\n    var url = window.URL.createObjectURL(blob);\r\n    a.href = url;\r\n    a.download = filename;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n    a.remove();\r\n};\r\n\r\nexport const str2bytes = (str) => {\r\n    console.log(str.length)\r\n    var bytes = new Uint8Array(str.length);\r\n    for (var i=0; i<str.length; i++) {\r\n       bytes[i] = str.charCodeAt(i);\r\n     }\r\n     return bytes;\r\n }\r\n\r\n export const checkArray = (array) => {\r\n     \r\n    if (typeof array !== undefined && Object.values(array).length > 0) {\r\n        return array\r\n    } else {\r\n        console.log(array);\r\n        throw \"Array invalid or empty\";\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}