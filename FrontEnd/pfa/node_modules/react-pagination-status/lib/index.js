'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PAGINATION_PART = {
  WHOLE_PAGES: 'WHOLE_PAGES',
  HEAD_PART: 'HEAD_PART',
  MIDDLE_PART: 'MIDDLE_PART',
  TAIL_PART: 'TAIL_PART'
};

var PAGINATION_ACTIONS = {
  PREV: 'PREV',
  NEXT: 'NEXT'
};

var PageButtonHOC = function PageButtonHOC(className) {
  var PageButton = function PageButton(_ref) {
    var children = _ref.children,
        handleClick = _ref.handleClick,
        disabled = _ref.disabled,
        active = _ref.active;

    var btnClassName = className + '__btn';
    var disableClassName = disabled ? className + '__btn--disable' : '';
    var activeClassName = active ? className + '__btn--active' : '';

    return _react2.default.createElement(
      'li',
      { className: className + '__item', onClick: handleClick },
      _react2.default.createElement(
        'button',
        {
          className: btnClassName + ' ' + (disableClassName || activeClassName)
        },
        children
      )
    );
  };

  PageButton.displayName = 'PageButton';
  PageButton.defaultProps = {
    handleClick: function handleClick() {},
    children: '',
    disabled: false,
    active: false
  };

  return PageButton;
};

var Pagination = function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination(props) {
    _classCallCheck(this, Pagination);

    var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

    _this.changePageByAction = _this.changePageByAction.bind(_this);
    _this.changePage = _this.changePage.bind(_this);
    _this.pageCount = Math.ceil(props.totalCount / props.perPageItemCount);
    _this.lastPage = _this.pageCount - 1;
    _this.pageArr = [].concat(_toConsumableArray(new Array(_this.pageCount).keys()));
    _this.halfPartialPageCount = Math.floor(props.partialPageCount / 2);
    _this.PageButton = PageButtonHOC(props.className);
    return _this;
  }

  _createClass(Pagination, [{
    key: 'changePage',
    value: function changePage(newPage) {
      var _this2 = this;

      return function () {
        var activePage = _this2.props.activePage;


        if (activePage !== newPage && !isNaN(newPage)) {
          _this2.props.handleChangePage(newPage);
        }
      };
    }
  }, {
    key: 'changePageByAction',
    value: function changePageByAction(status) {
      var _this3 = this;

      return function () {
        var activePage = _this3.props.activePage;

        var newPage = void 0;

        switch (status) {
          case PAGINATION_ACTIONS.PREV:
            newPage = activePage === 0 ? activePage : activePage - 1;
            break;
          case PAGINATION_ACTIONS.NEXT:
            newPage = activePage === _this3.lastPage ? activePage : activePage + 1;
            break;
          default:
            newPage = activePage;
        }

        if (activePage !== newPage) _this3.props.handleChangePage(newPage);
      };
    }
  }, {
    key: 'getPaginationStatus',
    value: function getPaginationStatus(activePage) {
      if (this.pageCount <= this.props.partialPageCount) {
        return PAGINATION_PART.WHOLE_PAGES;
      }

      if (activePage < this.props.partialPageCount) {
        return PAGINATION_PART.HEAD_PART;
      }

      if (this.pageCount - activePage <= this.props.partialPageCount) {
        return PAGINATION_PART.TAIL_PART;
      }

      return PAGINATION_PART.MIDDLE_PART;
    }
  }, {
    key: 'getPartialPages',
    value: function getPartialPages(status, partialCount, activePage) {
      switch (status) {
        case PAGINATION_PART.HEAD_PART:
          return this.pageArr.slice(0, partialCount);
        case PAGINATION_PART.TAIL_PART:
          return this.pageArr.slice(this.pageCount - partialCount);
        case PAGINATION_PART.MIDDLE_PART:
          return this.pageArr.slice(activePage - this.halfPartialPageCount, activePage + this.halfPartialPageCount + 1);
        default:
          return this.pageArr;

      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var PageButton = this.PageButton;
      var _props = this.props,
          activePage = _props.activePage,
          partialPageCount = _props.partialPageCount,
          prePageText = _props.prePageText,
          nextPageText = _props.nextPageText,
          className = _props.className;


      var paginationStatus = this.getPaginationStatus(activePage);
      var partialPages = this.getPartialPages(paginationStatus, partialPageCount, activePage);

      var firstPage = this.pageArr[0];
      var lastPage = this.pageArr[this.pageArr.length - 1];

      var isWholePages = paginationStatus === PAGINATION_PART.WHOLE_PAGES;
      var isInHeadPart = paginationStatus === PAGINATION_PART.HEAD_PART;
      var isInMiddlePart = paginationStatus === PAGINATION_PART.MIDDLE_PART;
      var isInTailPart = paginationStatus === PAGINATION_PART.TAIL_PART;

      var isFirstPage = activePage === firstPage;
      var isLastPage = activePage === lastPage;

      return _react2.default.createElement(
        'ul',
        { className: className },
        _react2.default.createElement(
          PageButton,
          {
            handleClick: this.changePageByAction(PAGINATION_ACTIONS.PREV),
            disabled: isFirstPage
          },
          prePageText
        ),
        !isWholePages && (!isInHeadPart || isInMiddlePart) && _react2.default.createElement(
          _react2.default.Fragment,
          null,
          _react2.default.createElement(
            PageButton,
            { handleClick: this.changePage(firstPage) },
            firstPage + 1
          ),
          _react2.default.createElement(
            PageButton,
            { disabled: true },
            '...'
          )
        ),
        partialPages.map(function (u) {
          return _react2.default.createElement(
            PageButton,
            {
              handleClick: _this4.changePage(u),
              key: 'page-' + u,
              active: activePage === u
            },
            u + 1
          );
        }),
        !isWholePages && (!isInTailPart || isInMiddlePart) && _react2.default.createElement(
          _react2.default.Fragment,
          null,
          _react2.default.createElement(
            PageButton,
            { disabled: true },
            '...'
          ),
          _react2.default.createElement(
            PageButton,
            { handleClick: this.changePage(lastPage) },
            lastPage + 1
          )
        ),
        _react2.default.createElement(
          PageButton,
          {
            handleClick: this.changePageByAction(PAGINATION_ACTIONS.NEXT),
            disabled: isLastPage
          },
          nextPageText
        )
      );
    }
  }]);

  return Pagination;
}(_react.Component);

Pagination.propTypes = {
  handleChangePage: _propTypes2.default.func.isRequired,
  activePage: _propTypes2.default.number.isRequired,
  totalCount: _propTypes2.default.number.isRequired,
  perPageItemCount: _propTypes2.default.number.isRequired,
  partialPageCount: _propTypes2.default.number,
  nextPageText: _propTypes2.default.string,
  prePageText: _propTypes2.default.string,
  className: _propTypes2.default.string
};
Pagination.defaultProps = {
  className: 'react-pagination-status',
  prePageText: '上一頁',
  nextPageText: '下一頁',
  partialPageCount: 5
};
exports.default = Pagination;