"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _lib = require("../../lib");

var _getNodeRefFromProps = _interopRequireDefault(require("./lib/getNodeRefFromProps"));

var _handleClassNamesChange = _interopRequireDefault(require("./lib/handleClassNamesChange"));

var _NodeRegistry = _interopRequireDefault(require("./lib/NodeRegistry"));

var nodeRegistry = new _NodeRegistry.default();
/**
 * A component that allows to manage classNames on a DOM node in declarative manner.
 */

var MountNode = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2.default)(MountNode, _Component);

  function MountNode() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = MountNode.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(_ref) {
    var nextClassName = _ref.className;
    var currentClassName = this.props.className;
    return nextClassName !== currentClassName;
  };

  _proto.componentDidMount = function componentDidMount() {
    var nodeRef = (0, _getNodeRefFromProps.default)(this.props);
    nodeRegistry.add(nodeRef, this);
    nodeRegistry.emit(nodeRef, _handleClassNamesChange.default);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    nodeRegistry.emit((0, _getNodeRefFromProps.default)(this.props), _handleClassNamesChange.default);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var nodeRef = (0, _getNodeRefFromProps.default)(this.props);
    nodeRegistry.del(nodeRef, this);
    nodeRegistry.emit(nodeRef, _handleClassNamesChange.default);
  };

  _proto.render = function render() {
    return null;
  };

  return MountNode;
}(_react.Component);

exports.default = MountNode;
MountNode.handledProps = ["className", "node"];
MountNode.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Additional classes. */
  className: _propTypes.default.string,

  /** The DOM node where we will apply class names. Defaults to document.body. */
  node: _propTypes.default.oneOfType([_lib.customPropTypes.domNode, _lib.customPropTypes.refObject])
} : {};