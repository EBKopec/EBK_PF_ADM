import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import PropTypes from 'prop-types';
import { Component } from 'react';
import { customPropTypes } from '../../lib';
import getNodeRefFromProps from './lib/getNodeRefFromProps';
import handleClassNamesChange from './lib/handleClassNamesChange';
import NodeRegistry from './lib/NodeRegistry';
var nodeRegistry = new NodeRegistry();
/**
 * A component that allows to manage classNames on a DOM node in declarative manner.
 */

var MountNode = /*#__PURE__*/function (_Component) {
  _inheritsLoose(MountNode, _Component);

  function MountNode() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = MountNode.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(_ref) {
    var nextClassName = _ref.className;
    var currentClassName = this.props.className;
    return nextClassName !== currentClassName;
  };

  _proto.componentDidMount = function componentDidMount() {
    var nodeRef = getNodeRefFromProps(this.props);
    nodeRegistry.add(nodeRef, this);
    nodeRegistry.emit(nodeRef, handleClassNamesChange);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    nodeRegistry.emit(getNodeRefFromProps(this.props), handleClassNamesChange);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var nodeRef = getNodeRefFromProps(this.props);
    nodeRegistry.del(nodeRef, this);
    nodeRegistry.emit(nodeRef, handleClassNamesChange);
  };

  _proto.render = function render() {
    return null;
  };

  return MountNode;
}(Component);

MountNode.handledProps = ["className", "node"];
export { MountNode as default };
MountNode.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Additional classes. */
  className: PropTypes.string,

  /** The DOM node where we will apply class names. Defaults to document.body. */
  node: PropTypes.oneOfType([customPropTypes.domNode, customPropTypes.refObject])
} : {};